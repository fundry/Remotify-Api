// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  staff: (where?: StaffWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  company: (where: CompanyWhereUniqueInput) => CompanyPromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  staff: (where: StaffWhereUniqueInput) => StaffPromise;
  staffs: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Staff>;
  staffsConnection: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StaffConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Team>;
  teamsConnection: (args?: {
    where?: TeamWhereInput;
    orderBy?: TeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TeamConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createStaff: (data: StaffCreateInput) => StaffPromise;
  updateStaff: (args: {
    data: StaffUpdateInput;
    where: StaffWhereUniqueInput;
  }) => StaffPromise;
  updateManyStaffs: (args: {
    data: StaffUpdateManyMutationInput;
    where?: StaffWhereInput;
  }) => BatchPayloadPromise;
  upsertStaff: (args: {
    where: StaffWhereUniqueInput;
    create: StaffCreateInput;
    update: StaffUpdateInput;
  }) => StaffPromise;
  deleteStaff: (where: StaffWhereUniqueInput) => StaffPromise;
  deleteManyStaffs: (where?: StaffWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (args: {
    data: TeamUpdateInput;
    where: TeamWhereUniqueInput;
  }) => TeamPromise;
  updateManyTeams: (args: {
    data: TeamUpdateManyMutationInput;
    where?: TeamWhereInput;
  }) => BatchPayloadPromise;
  upsertTeam: (args: {
    where: TeamWhereUniqueInput;
    create: TeamCreateInput;
    update: TeamUpdateInput;
  }) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  staff: (
    where?: StaffSubscriptionWhereInput
  ) => StaffSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StaffOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "team_ASC"
  | "team_DESC"
  | "role_ASC"
  | "role_DESC"
  | "joinedAt_ASC"
  | "joinedAt_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "Teams_ASC"
  | "Teams_DESC"
  | "leads_ASC"
  | "leads_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "members_ASC"
  | "members_DESC"
  | "description_ASC"
  | "description_DESC"
  | "active_ASC"
  | "active_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface StaffScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  team?: String;
  team_not?: String;
  team_in?: String[] | String;
  team_not_in?: String[] | String;
  team_lt?: String;
  team_lte?: String;
  team_gt?: String;
  team_gte?: String;
  team_contains?: String;
  team_not_contains?: String;
  team_starts_with?: String;
  team_not_starts_with?: String;
  team_ends_with?: String;
  team_not_ends_with?: String;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  joinedAt?: DateTimeInput;
  joinedAt_not?: DateTimeInput;
  joinedAt_in?: DateTimeInput[] | DateTimeInput;
  joinedAt_not_in?: DateTimeInput[] | DateTimeInput;
  joinedAt_lt?: DateTimeInput;
  joinedAt_lte?: DateTimeInput;
  joinedAt_gt?: DateTimeInput;
  joinedAt_gte?: DateTimeInput;
  AND?: StaffScalarWhereInput[] | StaffScalarWhereInput;
  OR?: StaffScalarWhereInput[] | StaffScalarWhereInput;
  NOT?: StaffScalarWhereInput[] | StaffScalarWhereInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CompanyUpdateManyWithoutStaffsInput {
  create?: CompanyCreateWithoutStaffsInput[] | CompanyCreateWithoutStaffsInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  set?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutStaffsInput[]
    | CompanyUpdateWithWhereUniqueWithoutStaffsInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutStaffsInput[]
    | CompanyUpsertWithWhereUniqueWithoutStaffsInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export interface CompanyCreateInput {
  id?: ID_Input;
  name?: String;
  staffs?: StaffCreateManyWithoutCompanyInput;
  Teams?: Int;
  leads?: Int;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface StaffCreateManyWithoutCompanyInput {
  create?: StaffCreateWithoutCompanyInput[] | StaffCreateWithoutCompanyInput;
  connect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
}

export interface StaffSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StaffWhereInput;
  AND?: StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput;
  OR?: StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput;
  NOT?: StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput;
}

export interface StaffCreateWithoutCompanyInput {
  id?: ID_Input;
  name?: String;
  team?: String;
  role?: String;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
  members?: Int;
  description?: String;
  active?: Boolean;
}

export interface CompanyUpdateInput {
  name?: String;
  staffs?: StaffUpdateManyWithoutCompanyInput;
  Teams?: Int;
  leads?: Int;
}

export interface StaffUpdateDataInput {
  name?: String;
  company?: CompanyUpdateManyWithoutStaffsInput;
  team?: String;
  role?: String;
}

export interface StaffUpdateManyWithoutCompanyInput {
  create?: StaffCreateWithoutCompanyInput[] | StaffCreateWithoutCompanyInput;
  delete?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  connect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  set?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  disconnect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  update?:
    | StaffUpdateWithWhereUniqueWithoutCompanyInput[]
    | StaffUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | StaffUpsertWithWhereUniqueWithoutCompanyInput[]
    | StaffUpsertWithWhereUniqueWithoutCompanyInput;
  deleteMany?: StaffScalarWhereInput[] | StaffScalarWhereInput;
  updateMany?:
    | StaffUpdateManyWithWhereNestedInput[]
    | StaffUpdateManyWithWhereNestedInput;
}

export interface StaffUpdateWithWhereUniqueNestedInput {
  where: StaffWhereUniqueInput;
  data: StaffUpdateDataInput;
}

export interface StaffUpdateWithWhereUniqueWithoutCompanyInput {
  where: StaffWhereUniqueInput;
  data: StaffUpdateWithoutCompanyDataInput;
}

export interface TeamUpdateInput {
  name?: String;
  members?: Int;
  description?: String;
  active?: Boolean;
  lead?: StaffUpdateManyInput;
}

export interface StaffUpdateWithoutCompanyDataInput {
  name?: String;
  team?: String;
  role?: String;
}

export interface StaffCreateManyInput {
  create?: StaffCreateInput[] | StaffCreateInput;
  connect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
}

export interface StaffUpsertWithWhereUniqueWithoutCompanyInput {
  where: StaffWhereUniqueInput;
  update: StaffUpdateWithoutCompanyDataInput;
  create: StaffCreateWithoutCompanyInput;
}

export interface TeamCreateInput {
  id?: ID_Input;
  name?: String;
  members?: Int;
  description?: String;
  active?: Boolean;
  lead?: StaffCreateManyInput;
}

export interface CompanyScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  Teams?: Int;
  Teams_not?: Int;
  Teams_in?: Int[] | Int;
  Teams_not_in?: Int[] | Int;
  Teams_lt?: Int;
  Teams_lte?: Int;
  Teams_gt?: Int;
  Teams_gte?: Int;
  leads?: Int;
  leads_not?: Int;
  leads_in?: Int[] | Int;
  leads_not_in?: Int[] | Int;
  leads_lt?: Int;
  leads_lte?: Int;
  leads_gt?: Int;
  leads_gte?: Int;
  AND?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  OR?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  NOT?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
}

export interface CompanyUpdateManyDataInput {
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export interface StaffUpdateManyWithWhereNestedInput {
  where: StaffScalarWhereInput;
  data: StaffUpdateManyDataInput;
}

export interface CompanyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  staffs_every?: StaffWhereInput;
  staffs_some?: StaffWhereInput;
  staffs_none?: StaffWhereInput;
  Teams?: Int;
  Teams_not?: Int;
  Teams_in?: Int[] | Int;
  Teams_not_in?: Int[] | Int;
  Teams_lt?: Int;
  Teams_lte?: Int;
  Teams_gt?: Int;
  Teams_gte?: Int;
  leads?: Int;
  leads_not?: Int;
  leads_in?: Int[] | Int;
  leads_not_in?: Int[] | Int;
  leads_lt?: Int;
  leads_lte?: Int;
  leads_gt?: Int;
  leads_gte?: Int;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface StaffUpdateManyDataInput {
  name?: String;
  team?: String;
  role?: String;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface CompanyUpsertWithWhereUniqueWithoutStaffsInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutStaffsDataInput;
  create: CompanyCreateWithoutStaffsInput;
}

export type StaffWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CompanyUpdateWithoutStaffsDataInput {
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CompanyUpdateWithWhereUniqueWithoutStaffsInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutStaffsDataInput;
}

export interface StaffUpdateManyMutationInput {
  name?: String;
  team?: String;
  role?: String;
}

export interface StaffUpdateInput {
  name?: String;
  company?: CompanyUpdateManyWithoutStaffsInput;
  team?: String;
  role?: String;
}

export interface CompanyCreateWithoutStaffsInput {
  id?: ID_Input;
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export interface CompanyCreateManyWithoutStaffsInput {
  create?: CompanyCreateWithoutStaffsInput[] | CompanyCreateWithoutStaffsInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface StaffCreateInput {
  id?: ID_Input;
  name?: String;
  company?: CompanyCreateManyWithoutStaffsInput;
  team?: String;
  role?: String;
}

export interface CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput;
  data: CompanyUpdateManyDataInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  members?: Int;
  members_not?: Int;
  members_in?: Int[] | Int;
  members_not_in?: Int[] | Int;
  members_lt?: Int;
  members_lte?: Int;
  members_gt?: Int;
  members_gte?: Int;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  lead_every?: StaffWhereInput;
  lead_some?: StaffWhereInput;
  lead_none?: StaffWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface StaffUpdateManyInput {
  create?: StaffCreateInput[] | StaffCreateInput;
  update?:
    | StaffUpdateWithWhereUniqueNestedInput[]
    | StaffUpdateWithWhereUniqueNestedInput;
  upsert?:
    | StaffUpsertWithWhereUniqueNestedInput[]
    | StaffUpsertWithWhereUniqueNestedInput;
  delete?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  connect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  set?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  disconnect?: StaffWhereUniqueInput[] | StaffWhereUniqueInput;
  deleteMany?: StaffScalarWhereInput[] | StaffScalarWhereInput;
  updateMany?:
    | StaffUpdateManyWithWhereNestedInput[]
    | StaffUpdateManyWithWhereNestedInput;
}

export interface StaffUpsertWithWhereUniqueNestedInput {
  where: StaffWhereUniqueInput;
  update: StaffUpdateDataInput;
  create: StaffCreateInput;
}

export interface StaffWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  company_every?: CompanyWhereInput;
  company_some?: CompanyWhereInput;
  company_none?: CompanyWhereInput;
  team?: String;
  team_not?: String;
  team_in?: String[] | String;
  team_not_in?: String[] | String;
  team_lt?: String;
  team_lte?: String;
  team_gt?: String;
  team_gte?: String;
  team_contains?: String;
  team_not_contains?: String;
  team_starts_with?: String;
  team_not_starts_with?: String;
  team_ends_with?: String;
  team_not_ends_with?: String;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  joinedAt?: DateTimeInput;
  joinedAt_not?: DateTimeInput;
  joinedAt_in?: DateTimeInput[] | DateTimeInput;
  joinedAt_not_in?: DateTimeInput[] | DateTimeInput;
  joinedAt_lt?: DateTimeInput;
  joinedAt_lte?: DateTimeInput;
  joinedAt_gt?: DateTimeInput;
  joinedAt_gte?: DateTimeInput;
  AND?: StaffWhereInput[] | StaffWhereInput;
  OR?: StaffWhereInput[] | StaffWhereInput;
  NOT?: StaffWhereInput[] | StaffWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name?: String;
  members?: Int;
  description?: String;
  active?: Boolean;
  createdAt: DateTimeOutput;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: () => Promise<Int>;
  description: () => Promise<String>;
  active: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StaffEdge {
  node: Staff;
  cursor: String;
}

export interface StaffEdgePromise extends Promise<StaffEdge>, Fragmentable {
  node: <T = StaffPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StaffEdgeSubscription
  extends Promise<AsyncIterator<StaffEdge>>,
    Fragmentable {
  node: <T = StaffSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface StaffConnection {
  pageInfo: PageInfo;
  edges: StaffEdge[];
}

export interface StaffConnectionPromise
  extends Promise<StaffConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StaffEdge>>() => T;
  aggregate: <T = AggregateStaffPromise>() => T;
}

export interface StaffConnectionSubscription
  extends Promise<AsyncIterator<StaffConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StaffEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStaffSubscription>() => T;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Staff {
  id: ID_Output;
  name?: String;
  team?: String;
  role?: String;
  joinedAt: DateTimeOutput;
}

export interface StaffPromise extends Promise<Staff>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: <T = FragmentableArray<Company>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: () => Promise<String>;
  role: () => Promise<String>;
  joinedAt: () => Promise<DateTimeOutput>;
}

export interface StaffSubscription
  extends Promise<AsyncIterator<Staff>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  company: <T = Promise<AsyncIterator<CompanySubscription>>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  team: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  joinedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TeamEdge {
  node: Team;
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StaffSubscriptionPayload {
  mutation: MutationType;
  node: Staff;
  updatedFields: String[];
  previousValues: StaffPreviousValues;
}

export interface StaffSubscriptionPayloadPromise
  extends Promise<StaffSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StaffPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StaffPreviousValuesPromise>() => T;
}

export interface StaffSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StaffSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StaffSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StaffPreviousValuesSubscription>() => T;
}

export interface StaffPreviousValues {
  id: ID_Output;
  name?: String;
  team?: String;
  role?: String;
  joinedAt: DateTimeOutput;
}

export interface StaffPreviousValuesPromise
  extends Promise<StaffPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  team: () => Promise<String>;
  role: () => Promise<String>;
  joinedAt: () => Promise<DateTimeOutput>;
}

export interface StaffPreviousValuesSubscription
  extends Promise<AsyncIterator<StaffPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  team: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  joinedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateStaff {
  count: Int;
}

export interface AggregateStaffPromise
  extends Promise<AggregateStaff>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStaffSubscription
  extends Promise<AsyncIterator<AggregateStaff>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  Teams: () => Promise<Int>;
  leads: () => Promise<Int>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  Teams: () => Promise<AsyncIterator<Int>>;
  leads: () => Promise<AsyncIterator<Int>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface Company {
  id: ID_Output;
  name?: String;
  Teams?: Int;
  leads?: Int;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  staffs: <T = FragmentableArray<Staff>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Teams: () => Promise<Int>;
  leads: () => Promise<Int>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  staffs: <T = Promise<AsyncIterator<StaffSubscription>>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Teams: () => Promise<AsyncIterator<Int>>;
  leads: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  node: Team;
  updatedFields: String[];
  previousValues: TeamPreviousValues;
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface Team {
  id: ID_Output;
  name?: String;
  members?: Int;
  description?: String;
  active?: Boolean;
  createdAt: DateTimeOutput;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: () => Promise<Int>;
  description: () => Promise<String>;
  active: () => Promise<Boolean>;
  lead: <T = FragmentableArray<Staff>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  lead: <T = Promise<AsyncIterator<StaffSubscription>>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TeamConnection {
  pageInfo: PageInfo;
  edges: TeamEdge[];
}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Staff",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
