module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateDepartment {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEventDiscusionChannel {
  count: Int!
}

type AggregateEventLead {
  count: Int!
}

type AggregateEventMember {
  count: Int!
}

type AggregateEventMessage {
  count: Int!
}

type AggregateEventTeam {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateGroupMember {
  count: Int!
}

type AggregateGroupTeam {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateStaff {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTesters {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Department {
  id: ID!
  name: String!
  description: String
  leads: Int
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  createdAt: DateTime!
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  description: String
  leads: Int
  teams: TeamCreateManyWithoutDepartmentInput
}

input DepartmentCreateManyInput {
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input DepartmentCreateOneWithoutTeamsInput {
  create: DepartmentCreateWithoutTeamsInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutTeamsInput {
  id: ID
  name: String!
  description: String
  leads: Int
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  leads_ASC
  leads_DESC
  createdAt_ASC
  createdAt_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
  description: String
  leads: Int
  createdAt: DateTime!
}

input DepartmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  leads: Int
  leads_not: Int
  leads_in: [Int!]
  leads_not_in: [Int!]
  leads_lt: Int
  leads_lte: Int
  leads_gt: Int
  leads_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DepartmentScalarWhereInput!]
  OR: [DepartmentScalarWhereInput!]
  NOT: [DepartmentScalarWhereInput!]
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateDataInput {
  name: String
  description: String
  leads: Int
  teams: TeamUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateInput {
  name: String
  description: String
  leads: Int
  teams: TeamUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyDataInput {
  name: String
  description: String
  leads: Int
}

input DepartmentUpdateManyInput {
  create: [DepartmentCreateInput!]
  update: [DepartmentUpdateWithWhereUniqueNestedInput!]
  upsert: [DepartmentUpsertWithWhereUniqueNestedInput!]
  delete: [DepartmentWhereUniqueInput!]
  connect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  disconnect: [DepartmentWhereUniqueInput!]
  deleteMany: [DepartmentScalarWhereInput!]
  updateMany: [DepartmentUpdateManyWithWhereNestedInput!]
}

input DepartmentUpdateManyMutationInput {
  name: String
  description: String
  leads: Int
}

input DepartmentUpdateManyWithWhereNestedInput {
  where: DepartmentScalarWhereInput!
  data: DepartmentUpdateManyDataInput!
}

input DepartmentUpdateOneWithoutTeamsInput {
  create: DepartmentCreateWithoutTeamsInput
  update: DepartmentUpdateWithoutTeamsDataInput
  upsert: DepartmentUpsertWithoutTeamsInput
  delete: Boolean
  disconnect: Boolean
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpdateWithoutTeamsDataInput {
  name: String
  description: String
  leads: Int
}

input DepartmentUpdateWithWhereUniqueNestedInput {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateDataInput!
}

input DepartmentUpsertWithoutTeamsInput {
  update: DepartmentUpdateWithoutTeamsDataInput!
  create: DepartmentCreateWithoutTeamsInput!
}

input DepartmentUpsertWithWhereUniqueNestedInput {
  where: DepartmentWhereUniqueInput!
  update: DepartmentUpdateDataInput!
  create: DepartmentCreateInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  leads: Int
  leads_not: Int
  leads_in: [Int!]
  leads_not_in: [Int!]
  leads_lt: Int
  leads_lte: Int
  leads_gt: Int
  leads_gte: Int
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
  name: String
}

type Event {
  id: ID!
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  createdAt: DateTime!
  members: Int
  member(where: EventMemberWhereInput, orderBy: EventMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventMember!]
  leads: Int
  lead(where: EventLeadWhereInput, orderBy: EventLeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventLead!]
  teams: Int
  team(where: EventTeamWhereInput, orderBy: EventTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventTeam!]
  channels: Int
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  members: Int
  member: EventMemberCreateManyWithoutEventInput
  leads: Int
  lead: EventLeadCreateManyWithoutEventInput
  teams: Int
  team: EventTeamCreateManyWithoutEventInput
  channels: Int
}

input EventCreateOneWithoutLeadInput {
  create: EventCreateWithoutLeadInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutMemberInput {
  create: EventCreateWithoutMemberInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutTeamInput {
  create: EventCreateWithoutTeamInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutLeadInput {
  id: ID
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  members: Int
  member: EventMemberCreateManyWithoutEventInput
  leads: Int
  teams: Int
  team: EventTeamCreateManyWithoutEventInput
  channels: Int
}

input EventCreateWithoutMemberInput {
  id: ID
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  members: Int
  leads: Int
  lead: EventLeadCreateManyWithoutEventInput
  teams: Int
  team: EventTeamCreateManyWithoutEventInput
  channels: Int
}

input EventCreateWithoutTeamInput {
  id: ID
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  members: Int
  member: EventMemberCreateManyWithoutEventInput
  leads: Int
  lead: EventLeadCreateManyWithoutEventInput
  teams: Int
  channels: Int
}

type EventDiscusionChannel {
  id: ID!
  message(where: EventMessageWhereInput, orderBy: EventMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventMessage!]
  member(where: EventMemberWhereInput, orderBy: EventMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventMember!]
  createdAt: DateTime!
}

type EventDiscusionChannelConnection {
  pageInfo: PageInfo!
  edges: [EventDiscusionChannelEdge]!
  aggregate: AggregateEventDiscusionChannel!
}

input EventDiscusionChannelCreateInput {
  id: ID
  message: EventMessageCreateManyWithoutChannelInput
  member: EventMemberCreateManyWithoutChannelInput
}

input EventDiscusionChannelCreateManyWithoutMemberInput {
  create: [EventDiscusionChannelCreateWithoutMemberInput!]
  connect: [EventDiscusionChannelWhereUniqueInput!]
}

input EventDiscusionChannelCreateManyWithoutMessageInput {
  create: [EventDiscusionChannelCreateWithoutMessageInput!]
  connect: [EventDiscusionChannelWhereUniqueInput!]
}

input EventDiscusionChannelCreateWithoutMemberInput {
  id: ID
  message: EventMessageCreateManyWithoutChannelInput
}

input EventDiscusionChannelCreateWithoutMessageInput {
  id: ID
  member: EventMemberCreateManyWithoutChannelInput
}

type EventDiscusionChannelEdge {
  node: EventDiscusionChannel!
  cursor: String!
}

enum EventDiscusionChannelOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventDiscusionChannelPreviousValues {
  id: ID!
  createdAt: DateTime!
}

input EventDiscusionChannelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventDiscusionChannelScalarWhereInput!]
  OR: [EventDiscusionChannelScalarWhereInput!]
  NOT: [EventDiscusionChannelScalarWhereInput!]
}

type EventDiscusionChannelSubscriptionPayload {
  mutation: MutationType!
  node: EventDiscusionChannel
  updatedFields: [String!]
  previousValues: EventDiscusionChannelPreviousValues
}

input EventDiscusionChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventDiscusionChannelWhereInput
  AND: [EventDiscusionChannelSubscriptionWhereInput!]
  OR: [EventDiscusionChannelSubscriptionWhereInput!]
  NOT: [EventDiscusionChannelSubscriptionWhereInput!]
}

input EventDiscusionChannelUpdateInput {
  message: EventMessageUpdateManyWithoutChannelInput
  member: EventMemberUpdateManyWithoutChannelInput
}

input EventDiscusionChannelUpdateManyWithoutMemberInput {
  create: [EventDiscusionChannelCreateWithoutMemberInput!]
  delete: [EventDiscusionChannelWhereUniqueInput!]
  connect: [EventDiscusionChannelWhereUniqueInput!]
  set: [EventDiscusionChannelWhereUniqueInput!]
  disconnect: [EventDiscusionChannelWhereUniqueInput!]
  update: [EventDiscusionChannelUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [EventDiscusionChannelUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [EventDiscusionChannelScalarWhereInput!]
}

input EventDiscusionChannelUpdateManyWithoutMessageInput {
  create: [EventDiscusionChannelCreateWithoutMessageInput!]
  delete: [EventDiscusionChannelWhereUniqueInput!]
  connect: [EventDiscusionChannelWhereUniqueInput!]
  set: [EventDiscusionChannelWhereUniqueInput!]
  disconnect: [EventDiscusionChannelWhereUniqueInput!]
  update: [EventDiscusionChannelUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [EventDiscusionChannelUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [EventDiscusionChannelScalarWhereInput!]
}

input EventDiscusionChannelUpdateWithoutMemberDataInput {
  message: EventMessageUpdateManyWithoutChannelInput
}

input EventDiscusionChannelUpdateWithoutMessageDataInput {
  member: EventMemberUpdateManyWithoutChannelInput
}

input EventDiscusionChannelUpdateWithWhereUniqueWithoutMemberInput {
  where: EventDiscusionChannelWhereUniqueInput!
  data: EventDiscusionChannelUpdateWithoutMemberDataInput!
}

input EventDiscusionChannelUpdateWithWhereUniqueWithoutMessageInput {
  where: EventDiscusionChannelWhereUniqueInput!
  data: EventDiscusionChannelUpdateWithoutMessageDataInput!
}

input EventDiscusionChannelUpsertWithWhereUniqueWithoutMemberInput {
  where: EventDiscusionChannelWhereUniqueInput!
  update: EventDiscusionChannelUpdateWithoutMemberDataInput!
  create: EventDiscusionChannelCreateWithoutMemberInput!
}

input EventDiscusionChannelUpsertWithWhereUniqueWithoutMessageInput {
  where: EventDiscusionChannelWhereUniqueInput!
  update: EventDiscusionChannelUpdateWithoutMessageDataInput!
  create: EventDiscusionChannelCreateWithoutMessageInput!
}

input EventDiscusionChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message_every: EventMessageWhereInput
  message_some: EventMessageWhereInput
  message_none: EventMessageWhereInput
  member_every: EventMemberWhereInput
  member_some: EventMemberWhereInput
  member_none: EventMemberWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventDiscusionChannelWhereInput!]
  OR: [EventDiscusionChannelWhereInput!]
  NOT: [EventDiscusionChannelWhereInput!]
}

input EventDiscusionChannelWhereUniqueInput {
  id: ID
}

type EventEdge {
  node: Event!
  cursor: String!
}

type EventLead {
  id: ID!
  firstname: String!
  lastname: String!
  event: Event
}

type EventLeadConnection {
  pageInfo: PageInfo!
  edges: [EventLeadEdge]!
  aggregate: AggregateEventLead!
}

input EventLeadCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  event: EventCreateOneWithoutLeadInput
}

input EventLeadCreateManyWithoutEventInput {
  create: [EventLeadCreateWithoutEventInput!]
  connect: [EventLeadWhereUniqueInput!]
}

input EventLeadCreateWithoutEventInput {
  id: ID
  firstname: String!
  lastname: String!
}

type EventLeadEdge {
  node: EventLead!
  cursor: String!
}

enum EventLeadOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
}

type EventLeadPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
}

input EventLeadScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  AND: [EventLeadScalarWhereInput!]
  OR: [EventLeadScalarWhereInput!]
  NOT: [EventLeadScalarWhereInput!]
}

type EventLeadSubscriptionPayload {
  mutation: MutationType!
  node: EventLead
  updatedFields: [String!]
  previousValues: EventLeadPreviousValues
}

input EventLeadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventLeadWhereInput
  AND: [EventLeadSubscriptionWhereInput!]
  OR: [EventLeadSubscriptionWhereInput!]
  NOT: [EventLeadSubscriptionWhereInput!]
}

input EventLeadUpdateInput {
  firstname: String
  lastname: String
  event: EventUpdateOneWithoutLeadInput
}

input EventLeadUpdateManyDataInput {
  firstname: String
  lastname: String
}

input EventLeadUpdateManyMutationInput {
  firstname: String
  lastname: String
}

input EventLeadUpdateManyWithoutEventInput {
  create: [EventLeadCreateWithoutEventInput!]
  delete: [EventLeadWhereUniqueInput!]
  connect: [EventLeadWhereUniqueInput!]
  set: [EventLeadWhereUniqueInput!]
  disconnect: [EventLeadWhereUniqueInput!]
  update: [EventLeadUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EventLeadUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [EventLeadScalarWhereInput!]
  updateMany: [EventLeadUpdateManyWithWhereNestedInput!]
}

input EventLeadUpdateManyWithWhereNestedInput {
  where: EventLeadScalarWhereInput!
  data: EventLeadUpdateManyDataInput!
}

input EventLeadUpdateWithoutEventDataInput {
  firstname: String
  lastname: String
}

input EventLeadUpdateWithWhereUniqueWithoutEventInput {
  where: EventLeadWhereUniqueInput!
  data: EventLeadUpdateWithoutEventDataInput!
}

input EventLeadUpsertWithWhereUniqueWithoutEventInput {
  where: EventLeadWhereUniqueInput!
  update: EventLeadUpdateWithoutEventDataInput!
  create: EventLeadCreateWithoutEventInput!
}

input EventLeadWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  event: EventWhereInput
  AND: [EventLeadWhereInput!]
  OR: [EventLeadWhereInput!]
  NOT: [EventLeadWhereInput!]
}

input EventLeadWhereUniqueInput {
  id: ID
  lastname: String
}

type EventMember {
  id: ID!
  firstname: String!
  lastname: String!
  event: Event
  channel(where: EventDiscusionChannelWhereInput, orderBy: EventDiscusionChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventDiscusionChannel!]
}

type EventMemberConnection {
  pageInfo: PageInfo!
  edges: [EventMemberEdge]!
  aggregate: AggregateEventMember!
}

input EventMemberCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  event: EventCreateOneWithoutMemberInput
  channel: EventDiscusionChannelCreateManyWithoutMemberInput
}

input EventMemberCreateManyWithoutChannelInput {
  create: [EventMemberCreateWithoutChannelInput!]
  connect: [EventMemberWhereUniqueInput!]
}

input EventMemberCreateManyWithoutEventInput {
  create: [EventMemberCreateWithoutEventInput!]
  connect: [EventMemberWhereUniqueInput!]
}

input EventMemberCreateWithoutChannelInput {
  id: ID
  firstname: String!
  lastname: String!
  event: EventCreateOneWithoutMemberInput
}

input EventMemberCreateWithoutEventInput {
  id: ID
  firstname: String!
  lastname: String!
  channel: EventDiscusionChannelCreateManyWithoutMemberInput
}

type EventMemberEdge {
  node: EventMember!
  cursor: String!
}

enum EventMemberOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
}

type EventMemberPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
}

input EventMemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  AND: [EventMemberScalarWhereInput!]
  OR: [EventMemberScalarWhereInput!]
  NOT: [EventMemberScalarWhereInput!]
}

type EventMemberSubscriptionPayload {
  mutation: MutationType!
  node: EventMember
  updatedFields: [String!]
  previousValues: EventMemberPreviousValues
}

input EventMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventMemberWhereInput
  AND: [EventMemberSubscriptionWhereInput!]
  OR: [EventMemberSubscriptionWhereInput!]
  NOT: [EventMemberSubscriptionWhereInput!]
}

input EventMemberUpdateInput {
  firstname: String
  lastname: String
  event: EventUpdateOneWithoutMemberInput
  channel: EventDiscusionChannelUpdateManyWithoutMemberInput
}

input EventMemberUpdateManyDataInput {
  firstname: String
  lastname: String
}

input EventMemberUpdateManyMutationInput {
  firstname: String
  lastname: String
}

input EventMemberUpdateManyWithoutChannelInput {
  create: [EventMemberCreateWithoutChannelInput!]
  delete: [EventMemberWhereUniqueInput!]
  connect: [EventMemberWhereUniqueInput!]
  set: [EventMemberWhereUniqueInput!]
  disconnect: [EventMemberWhereUniqueInput!]
  update: [EventMemberUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [EventMemberUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [EventMemberScalarWhereInput!]
  updateMany: [EventMemberUpdateManyWithWhereNestedInput!]
}

input EventMemberUpdateManyWithoutEventInput {
  create: [EventMemberCreateWithoutEventInput!]
  delete: [EventMemberWhereUniqueInput!]
  connect: [EventMemberWhereUniqueInput!]
  set: [EventMemberWhereUniqueInput!]
  disconnect: [EventMemberWhereUniqueInput!]
  update: [EventMemberUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EventMemberUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [EventMemberScalarWhereInput!]
  updateMany: [EventMemberUpdateManyWithWhereNestedInput!]
}

input EventMemberUpdateManyWithWhereNestedInput {
  where: EventMemberScalarWhereInput!
  data: EventMemberUpdateManyDataInput!
}

input EventMemberUpdateWithoutChannelDataInput {
  firstname: String
  lastname: String
  event: EventUpdateOneWithoutMemberInput
}

input EventMemberUpdateWithoutEventDataInput {
  firstname: String
  lastname: String
  channel: EventDiscusionChannelUpdateManyWithoutMemberInput
}

input EventMemberUpdateWithWhereUniqueWithoutChannelInput {
  where: EventMemberWhereUniqueInput!
  data: EventMemberUpdateWithoutChannelDataInput!
}

input EventMemberUpdateWithWhereUniqueWithoutEventInput {
  where: EventMemberWhereUniqueInput!
  data: EventMemberUpdateWithoutEventDataInput!
}

input EventMemberUpsertWithWhereUniqueWithoutChannelInput {
  where: EventMemberWhereUniqueInput!
  update: EventMemberUpdateWithoutChannelDataInput!
  create: EventMemberCreateWithoutChannelInput!
}

input EventMemberUpsertWithWhereUniqueWithoutEventInput {
  where: EventMemberWhereUniqueInput!
  update: EventMemberUpdateWithoutEventDataInput!
  create: EventMemberCreateWithoutEventInput!
}

input EventMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  event: EventWhereInput
  channel_every: EventDiscusionChannelWhereInput
  channel_some: EventDiscusionChannelWhereInput
  channel_none: EventDiscusionChannelWhereInput
  AND: [EventMemberWhereInput!]
  OR: [EventMemberWhereInput!]
  NOT: [EventMemberWhereInput!]
}

input EventMemberWhereUniqueInput {
  id: ID
  lastname: String
}

type EventMessage {
  id: ID!
  channel(where: EventDiscusionChannelWhereInput, orderBy: EventDiscusionChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventDiscusionChannel!]
  content: String
  sender: String
  createdAt: DateTime!
}

type EventMessageConnection {
  pageInfo: PageInfo!
  edges: [EventMessageEdge]!
  aggregate: AggregateEventMessage!
}

input EventMessageCreateInput {
  id: ID
  channel: EventDiscusionChannelCreateManyWithoutMessageInput
  content: String
  sender: String
}

input EventMessageCreateManyWithoutChannelInput {
  create: [EventMessageCreateWithoutChannelInput!]
  connect: [EventMessageWhereUniqueInput!]
}

input EventMessageCreateWithoutChannelInput {
  id: ID
  content: String
  sender: String
}

type EventMessageEdge {
  node: EventMessage!
  cursor: String!
}

enum EventMessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  sender_ASC
  sender_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventMessagePreviousValues {
  id: ID!
  content: String
  sender: String
  createdAt: DateTime!
}

input EventMessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  sender: String
  sender_not: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_lt: String
  sender_lte: String
  sender_gt: String
  sender_gte: String
  sender_contains: String
  sender_not_contains: String
  sender_starts_with: String
  sender_not_starts_with: String
  sender_ends_with: String
  sender_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventMessageScalarWhereInput!]
  OR: [EventMessageScalarWhereInput!]
  NOT: [EventMessageScalarWhereInput!]
}

type EventMessageSubscriptionPayload {
  mutation: MutationType!
  node: EventMessage
  updatedFields: [String!]
  previousValues: EventMessagePreviousValues
}

input EventMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventMessageWhereInput
  AND: [EventMessageSubscriptionWhereInput!]
  OR: [EventMessageSubscriptionWhereInput!]
  NOT: [EventMessageSubscriptionWhereInput!]
}

input EventMessageUpdateInput {
  channel: EventDiscusionChannelUpdateManyWithoutMessageInput
  content: String
  sender: String
}

input EventMessageUpdateManyDataInput {
  content: String
  sender: String
}

input EventMessageUpdateManyMutationInput {
  content: String
  sender: String
}

input EventMessageUpdateManyWithoutChannelInput {
  create: [EventMessageCreateWithoutChannelInput!]
  delete: [EventMessageWhereUniqueInput!]
  connect: [EventMessageWhereUniqueInput!]
  set: [EventMessageWhereUniqueInput!]
  disconnect: [EventMessageWhereUniqueInput!]
  update: [EventMessageUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [EventMessageUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [EventMessageScalarWhereInput!]
  updateMany: [EventMessageUpdateManyWithWhereNestedInput!]
}

input EventMessageUpdateManyWithWhereNestedInput {
  where: EventMessageScalarWhereInput!
  data: EventMessageUpdateManyDataInput!
}

input EventMessageUpdateWithoutChannelDataInput {
  content: String
  sender: String
}

input EventMessageUpdateWithWhereUniqueWithoutChannelInput {
  where: EventMessageWhereUniqueInput!
  data: EventMessageUpdateWithoutChannelDataInput!
}

input EventMessageUpsertWithWhereUniqueWithoutChannelInput {
  where: EventMessageWhereUniqueInput!
  update: EventMessageUpdateWithoutChannelDataInput!
  create: EventMessageCreateWithoutChannelInput!
}

input EventMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  channel_every: EventDiscusionChannelWhereInput
  channel_some: EventDiscusionChannelWhereInput
  channel_none: EventDiscusionChannelWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  sender: String
  sender_not: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_lt: String
  sender_lte: String
  sender_gt: String
  sender_gte: String
  sender_contains: String
  sender_not_contains: String
  sender_starts_with: String
  sender_not_starts_with: String
  sender_ends_with: String
  sender_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventMessageWhereInput!]
  OR: [EventMessageWhereInput!]
  NOT: [EventMessageWhereInput!]
}

input EventMessageWhereUniqueInput {
  id: ID
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  email_ASC
  email_DESC
  website_ASC
  website_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  members_ASC
  members_DESC
  leads_ASC
  leads_DESC
  teams_ASC
  teams_DESC
  channels_ASC
  channels_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  description: String
  email: String!
  website: String
  password: String!
  createdAt: DateTime!
  members: Int
  leads: Int
  teams: Int
  channels: Int
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

type EventTeam {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  event: Event
}

type EventTeamConnection {
  pageInfo: PageInfo!
  edges: [EventTeamEdge]!
  aggregate: AggregateEventTeam!
}

input EventTeamCreateInput {
  id: ID
  name: String!
  description: String!
  event: EventCreateOneWithoutTeamInput
}

input EventTeamCreateManyWithoutEventInput {
  create: [EventTeamCreateWithoutEventInput!]
  connect: [EventTeamWhereUniqueInput!]
}

input EventTeamCreateWithoutEventInput {
  id: ID
  name: String!
  description: String!
}

type EventTeamEdge {
  node: EventTeam!
  cursor: String!
}

enum EventTeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventTeamPreviousValues {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
}

input EventTeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [EventTeamScalarWhereInput!]
  OR: [EventTeamScalarWhereInput!]
  NOT: [EventTeamScalarWhereInput!]
}

type EventTeamSubscriptionPayload {
  mutation: MutationType!
  node: EventTeam
  updatedFields: [String!]
  previousValues: EventTeamPreviousValues
}

input EventTeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventTeamWhereInput
  AND: [EventTeamSubscriptionWhereInput!]
  OR: [EventTeamSubscriptionWhereInput!]
  NOT: [EventTeamSubscriptionWhereInput!]
}

input EventTeamUpdateInput {
  name: String
  description: String
  event: EventUpdateOneWithoutTeamInput
}

input EventTeamUpdateManyDataInput {
  name: String
  description: String
}

input EventTeamUpdateManyMutationInput {
  name: String
  description: String
}

input EventTeamUpdateManyWithoutEventInput {
  create: [EventTeamCreateWithoutEventInput!]
  delete: [EventTeamWhereUniqueInput!]
  connect: [EventTeamWhereUniqueInput!]
  set: [EventTeamWhereUniqueInput!]
  disconnect: [EventTeamWhereUniqueInput!]
  update: [EventTeamUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [EventTeamUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [EventTeamScalarWhereInput!]
  updateMany: [EventTeamUpdateManyWithWhereNestedInput!]
}

input EventTeamUpdateManyWithWhereNestedInput {
  where: EventTeamScalarWhereInput!
  data: EventTeamUpdateManyDataInput!
}

input EventTeamUpdateWithoutEventDataInput {
  name: String
  description: String
}

input EventTeamUpdateWithWhereUniqueWithoutEventInput {
  where: EventTeamWhereUniqueInput!
  data: EventTeamUpdateWithoutEventDataInput!
}

input EventTeamUpsertWithWhereUniqueWithoutEventInput {
  where: EventTeamWhereUniqueInput!
  update: EventTeamUpdateWithoutEventDataInput!
  create: EventTeamCreateWithoutEventInput!
}

input EventTeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  event: EventWhereInput
  AND: [EventTeamWhereInput!]
  OR: [EventTeamWhereInput!]
  NOT: [EventTeamWhereInput!]
}

input EventTeamWhereUniqueInput {
  id: ID
  name: String
}

input EventUpdateInput {
  name: String
  description: String
  email: String
  website: String
  password: String
  members: Int
  member: EventMemberUpdateManyWithoutEventInput
  leads: Int
  lead: EventLeadUpdateManyWithoutEventInput
  teams: Int
  team: EventTeamUpdateManyWithoutEventInput
  channels: Int
}

input EventUpdateManyMutationInput {
  name: String
  description: String
  email: String
  website: String
  password: String
  members: Int
  leads: Int
  teams: Int
  channels: Int
}

input EventUpdateOneWithoutLeadInput {
  create: EventCreateWithoutLeadInput
  update: EventUpdateWithoutLeadDataInput
  upsert: EventUpsertWithoutLeadInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateOneWithoutMemberInput {
  create: EventCreateWithoutMemberInput
  update: EventUpdateWithoutMemberDataInput
  upsert: EventUpsertWithoutMemberInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateOneWithoutTeamInput {
  create: EventCreateWithoutTeamInput
  update: EventUpdateWithoutTeamDataInput
  upsert: EventUpsertWithoutTeamInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutLeadDataInput {
  name: String
  description: String
  email: String
  website: String
  password: String
  members: Int
  member: EventMemberUpdateManyWithoutEventInput
  leads: Int
  teams: Int
  team: EventTeamUpdateManyWithoutEventInput
  channels: Int
}

input EventUpdateWithoutMemberDataInput {
  name: String
  description: String
  email: String
  website: String
  password: String
  members: Int
  leads: Int
  lead: EventLeadUpdateManyWithoutEventInput
  teams: Int
  team: EventTeamUpdateManyWithoutEventInput
  channels: Int
}

input EventUpdateWithoutTeamDataInput {
  name: String
  description: String
  email: String
  website: String
  password: String
  members: Int
  member: EventMemberUpdateManyWithoutEventInput
  leads: Int
  lead: EventLeadUpdateManyWithoutEventInput
  teams: Int
  channels: Int
}

input EventUpsertWithoutLeadInput {
  update: EventUpdateWithoutLeadDataInput!
  create: EventCreateWithoutLeadInput!
}

input EventUpsertWithoutMemberInput {
  update: EventUpdateWithoutMemberDataInput!
  create: EventCreateWithoutMemberInput!
}

input EventUpsertWithoutTeamInput {
  update: EventUpdateWithoutTeamDataInput!
  create: EventCreateWithoutTeamInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  members: Int
  members_not: Int
  members_in: [Int!]
  members_not_in: [Int!]
  members_lt: Int
  members_lte: Int
  members_gt: Int
  members_gte: Int
  member_every: EventMemberWhereInput
  member_some: EventMemberWhereInput
  member_none: EventMemberWhereInput
  leads: Int
  leads_not: Int
  leads_in: [Int!]
  leads_not_in: [Int!]
  leads_lt: Int
  leads_lte: Int
  leads_gt: Int
  leads_gte: Int
  lead_every: EventLeadWhereInput
  lead_some: EventLeadWhereInput
  lead_none: EventLeadWhereInput
  teams: Int
  teams_not: Int
  teams_in: [Int!]
  teams_not_in: [Int!]
  teams_lt: Int
  teams_lte: Int
  teams_gt: Int
  teams_gte: Int
  team_every: EventTeamWhereInput
  team_some: EventTeamWhereInput
  team_none: EventTeamWhereInput
  channels: Int
  channels_not: Int
  channels_in: [Int!]
  channels_not_in: [Int!]
  channels_lt: Int
  channels_lte: Int
  channels_gt: Int
  channels_gte: Int
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
  name: String
  email: String
}

type Group {
  id: ID!
  name: String!
  description: String
  members: Int
  member(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember!]
  email: String!
  website: String
  password: String!
  teams: Int
  team: GroupTeam
  leads: Int
  createdAt: DateTime!
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  description: String
  members: Int
  member: GroupMemberCreateManyWithoutGroupInput
  email: String!
  website: String
  password: String!
  teams: Int
  team: GroupTeamCreateOneInput
  leads: Int
}

input GroupCreateOneWithoutMemberInput {
  create: GroupCreateWithoutMemberInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutMemberInput {
  id: ID
  name: String!
  description: String
  members: Int
  email: String!
  website: String
  password: String!
  teams: Int
  team: GroupTeamCreateOneInput
  leads: Int
}

type GroupEdge {
  node: Group!
  cursor: String!
}

type GroupMember {
  id: ID!
  firstname: ID!
  lastname: ID!
  password: String!
  team: String
  group: Group
  isLead: Boolean
}

type GroupMemberConnection {
  pageInfo: PageInfo!
  edges: [GroupMemberEdge]!
  aggregate: AggregateGroupMember!
}

input GroupMemberCreateInput {
  id: ID
  firstname: ID!
  lastname: ID!
  password: String!
  team: String
  group: GroupCreateOneWithoutMemberInput
  isLead: Boolean
}

input GroupMemberCreateManyWithoutGroupInput {
  create: [GroupMemberCreateWithoutGroupInput!]
  connect: [GroupMemberWhereUniqueInput!]
}

input GroupMemberCreateWithoutGroupInput {
  id: ID
  firstname: ID!
  lastname: ID!
  password: String!
  team: String
  isLead: Boolean
}

type GroupMemberEdge {
  node: GroupMember!
  cursor: String!
}

enum GroupMemberOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  password_ASC
  password_DESC
  team_ASC
  team_DESC
  isLead_ASC
  isLead_DESC
}

type GroupMemberPreviousValues {
  id: ID!
  firstname: ID!
  lastname: ID!
  password: String!
  team: String
  isLead: Boolean
}

input GroupMemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: ID
  firstname_not: ID
  firstname_in: [ID!]
  firstname_not_in: [ID!]
  firstname_lt: ID
  firstname_lte: ID
  firstname_gt: ID
  firstname_gte: ID
  firstname_contains: ID
  firstname_not_contains: ID
  firstname_starts_with: ID
  firstname_not_starts_with: ID
  firstname_ends_with: ID
  firstname_not_ends_with: ID
  lastname: ID
  lastname_not: ID
  lastname_in: [ID!]
  lastname_not_in: [ID!]
  lastname_lt: ID
  lastname_lte: ID
  lastname_gt: ID
  lastname_gte: ID
  lastname_contains: ID
  lastname_not_contains: ID
  lastname_starts_with: ID
  lastname_not_starts_with: ID
  lastname_ends_with: ID
  lastname_not_ends_with: ID
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  team: String
  team_not: String
  team_in: [String!]
  team_not_in: [String!]
  team_lt: String
  team_lte: String
  team_gt: String
  team_gte: String
  team_contains: String
  team_not_contains: String
  team_starts_with: String
  team_not_starts_with: String
  team_ends_with: String
  team_not_ends_with: String
  isLead: Boolean
  isLead_not: Boolean
  AND: [GroupMemberScalarWhereInput!]
  OR: [GroupMemberScalarWhereInput!]
  NOT: [GroupMemberScalarWhereInput!]
}

type GroupMemberSubscriptionPayload {
  mutation: MutationType!
  node: GroupMember
  updatedFields: [String!]
  previousValues: GroupMemberPreviousValues
}

input GroupMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupMemberWhereInput
  AND: [GroupMemberSubscriptionWhereInput!]
  OR: [GroupMemberSubscriptionWhereInput!]
  NOT: [GroupMemberSubscriptionWhereInput!]
}

input GroupMemberUpdateInput {
  firstname: ID
  lastname: ID
  password: String
  team: String
  group: GroupUpdateOneWithoutMemberInput
  isLead: Boolean
}

input GroupMemberUpdateManyDataInput {
  firstname: ID
  lastname: ID
  password: String
  team: String
  isLead: Boolean
}

input GroupMemberUpdateManyMutationInput {
  firstname: ID
  lastname: ID
  password: String
  team: String
  isLead: Boolean
}

input GroupMemberUpdateManyWithoutGroupInput {
  create: [GroupMemberCreateWithoutGroupInput!]
  delete: [GroupMemberWhereUniqueInput!]
  connect: [GroupMemberWhereUniqueInput!]
  set: [GroupMemberWhereUniqueInput!]
  disconnect: [GroupMemberWhereUniqueInput!]
  update: [GroupMemberUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [GroupMemberUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [GroupMemberScalarWhereInput!]
  updateMany: [GroupMemberUpdateManyWithWhereNestedInput!]
}

input GroupMemberUpdateManyWithWhereNestedInput {
  where: GroupMemberScalarWhereInput!
  data: GroupMemberUpdateManyDataInput!
}

input GroupMemberUpdateWithoutGroupDataInput {
  firstname: ID
  lastname: ID
  password: String
  team: String
  isLead: Boolean
}

input GroupMemberUpdateWithWhereUniqueWithoutGroupInput {
  where: GroupMemberWhereUniqueInput!
  data: GroupMemberUpdateWithoutGroupDataInput!
}

input GroupMemberUpsertWithWhereUniqueWithoutGroupInput {
  where: GroupMemberWhereUniqueInput!
  update: GroupMemberUpdateWithoutGroupDataInput!
  create: GroupMemberCreateWithoutGroupInput!
}

input GroupMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: ID
  firstname_not: ID
  firstname_in: [ID!]
  firstname_not_in: [ID!]
  firstname_lt: ID
  firstname_lte: ID
  firstname_gt: ID
  firstname_gte: ID
  firstname_contains: ID
  firstname_not_contains: ID
  firstname_starts_with: ID
  firstname_not_starts_with: ID
  firstname_ends_with: ID
  firstname_not_ends_with: ID
  lastname: ID
  lastname_not: ID
  lastname_in: [ID!]
  lastname_not_in: [ID!]
  lastname_lt: ID
  lastname_lte: ID
  lastname_gt: ID
  lastname_gte: ID
  lastname_contains: ID
  lastname_not_contains: ID
  lastname_starts_with: ID
  lastname_not_starts_with: ID
  lastname_ends_with: ID
  lastname_not_ends_with: ID
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  team: String
  team_not: String
  team_in: [String!]
  team_not_in: [String!]
  team_lt: String
  team_lte: String
  team_gt: String
  team_gte: String
  team_contains: String
  team_not_contains: String
  team_starts_with: String
  team_not_starts_with: String
  team_ends_with: String
  team_not_ends_with: String
  group: GroupWhereInput
  isLead: Boolean
  isLead_not: Boolean
  AND: [GroupMemberWhereInput!]
  OR: [GroupMemberWhereInput!]
  NOT: [GroupMemberWhereInput!]
}

input GroupMemberWhereUniqueInput {
  id: ID
  lastname: ID
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  members_ASC
  members_DESC
  email_ASC
  email_DESC
  website_ASC
  website_DESC
  password_ASC
  password_DESC
  teams_ASC
  teams_DESC
  leads_ASC
  leads_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  description: String
  members: Int
  email: String!
  website: String
  password: String!
  teams: Int
  leads: Int
  createdAt: DateTime!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

type GroupTeam {
  id: ID!
  name: String!
  members: Int
  description: String
  active: Boolean
  lead: String
  createdAt: DateTime!
}

type GroupTeamConnection {
  pageInfo: PageInfo!
  edges: [GroupTeamEdge]!
  aggregate: AggregateGroupTeam!
}

input GroupTeamCreateInput {
  id: ID
  name: String!
  members: Int
  description: String
  active: Boolean
  lead: String
}

input GroupTeamCreateOneInput {
  create: GroupTeamCreateInput
  connect: GroupTeamWhereUniqueInput
}

type GroupTeamEdge {
  node: GroupTeam!
  cursor: String!
}

enum GroupTeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  members_ASC
  members_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  lead_ASC
  lead_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupTeamPreviousValues {
  id: ID!
  name: String!
  members: Int
  description: String
  active: Boolean
  lead: String
  createdAt: DateTime!
}

type GroupTeamSubscriptionPayload {
  mutation: MutationType!
  node: GroupTeam
  updatedFields: [String!]
  previousValues: GroupTeamPreviousValues
}

input GroupTeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupTeamWhereInput
  AND: [GroupTeamSubscriptionWhereInput!]
  OR: [GroupTeamSubscriptionWhereInput!]
  NOT: [GroupTeamSubscriptionWhereInput!]
}

input GroupTeamUpdateDataInput {
  name: String
  members: Int
  description: String
  active: Boolean
  lead: String
}

input GroupTeamUpdateInput {
  name: String
  members: Int
  description: String
  active: Boolean
  lead: String
}

input GroupTeamUpdateManyMutationInput {
  name: String
  members: Int
  description: String
  active: Boolean
  lead: String
}

input GroupTeamUpdateOneInput {
  create: GroupTeamCreateInput
  update: GroupTeamUpdateDataInput
  upsert: GroupTeamUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupTeamWhereUniqueInput
}

input GroupTeamUpsertNestedInput {
  update: GroupTeamUpdateDataInput!
  create: GroupTeamCreateInput!
}

input GroupTeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members: Int
  members_not: Int
  members_in: [Int!]
  members_not_in: [Int!]
  members_lt: Int
  members_lte: Int
  members_gt: Int
  members_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  active: Boolean
  active_not: Boolean
  lead: String
  lead_not: String
  lead_in: [String!]
  lead_not_in: [String!]
  lead_lt: String
  lead_lte: String
  lead_gt: String
  lead_gte: String
  lead_contains: String
  lead_not_contains: String
  lead_starts_with: String
  lead_not_starts_with: String
  lead_ends_with: String
  lead_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupTeamWhereInput!]
  OR: [GroupTeamWhereInput!]
  NOT: [GroupTeamWhereInput!]
}

input GroupTeamWhereUniqueInput {
  id: ID
  name: String
}

input GroupUpdateInput {
  name: String
  description: String
  members: Int
  member: GroupMemberUpdateManyWithoutGroupInput
  email: String
  website: String
  password: String
  teams: Int
  team: GroupTeamUpdateOneInput
  leads: Int
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
  members: Int
  email: String
  website: String
  password: String
  teams: Int
  leads: Int
}

input GroupUpdateOneWithoutMemberInput {
  create: GroupCreateWithoutMemberInput
  update: GroupUpdateWithoutMemberDataInput
  upsert: GroupUpsertWithoutMemberInput
  delete: Boolean
  disconnect: Boolean
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutMemberDataInput {
  name: String
  description: String
  members: Int
  email: String
  website: String
  password: String
  teams: Int
  team: GroupTeamUpdateOneInput
  leads: Int
}

input GroupUpsertWithoutMemberInput {
  update: GroupUpdateWithoutMemberDataInput!
  create: GroupCreateWithoutMemberInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  members: Int
  members_not: Int
  members_in: [Int!]
  members_not_in: [Int!]
  members_lt: Int
  members_lte: Int
  members_gt: Int
  members_gte: Int
  member_every: GroupMemberWhereInput
  member_some: GroupMemberWhereInput
  member_none: GroupMemberWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  teams: Int
  teams_not: Int
  teams_in: [Int!]
  teams_not_in: [Int!]
  teams_lt: Int
  teams_lte: Int
  teams_gt: Int
  teams_gte: Int
  team: GroupTeamWhereInput
  leads: Int
  leads_not: Int
  leads_in: [Int!]
  leads_not_in: [Int!]
  leads_lt: Int
  leads_lte: Int
  leads_gt: Int
  leads_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  name: String
  email: String
}

scalar Long

type Mutation {
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createEventDiscusionChannel(data: EventDiscusionChannelCreateInput!): EventDiscusionChannel!
  updateEventDiscusionChannel(data: EventDiscusionChannelUpdateInput!, where: EventDiscusionChannelWhereUniqueInput!): EventDiscusionChannel
  upsertEventDiscusionChannel(where: EventDiscusionChannelWhereUniqueInput!, create: EventDiscusionChannelCreateInput!, update: EventDiscusionChannelUpdateInput!): EventDiscusionChannel!
  deleteEventDiscusionChannel(where: EventDiscusionChannelWhereUniqueInput!): EventDiscusionChannel
  deleteManyEventDiscusionChannels(where: EventDiscusionChannelWhereInput): BatchPayload!
  createEventLead(data: EventLeadCreateInput!): EventLead!
  updateEventLead(data: EventLeadUpdateInput!, where: EventLeadWhereUniqueInput!): EventLead
  updateManyEventLeads(data: EventLeadUpdateManyMutationInput!, where: EventLeadWhereInput): BatchPayload!
  upsertEventLead(where: EventLeadWhereUniqueInput!, create: EventLeadCreateInput!, update: EventLeadUpdateInput!): EventLead!
  deleteEventLead(where: EventLeadWhereUniqueInput!): EventLead
  deleteManyEventLeads(where: EventLeadWhereInput): BatchPayload!
  createEventMember(data: EventMemberCreateInput!): EventMember!
  updateEventMember(data: EventMemberUpdateInput!, where: EventMemberWhereUniqueInput!): EventMember
  updateManyEventMembers(data: EventMemberUpdateManyMutationInput!, where: EventMemberWhereInput): BatchPayload!
  upsertEventMember(where: EventMemberWhereUniqueInput!, create: EventMemberCreateInput!, update: EventMemberUpdateInput!): EventMember!
  deleteEventMember(where: EventMemberWhereUniqueInput!): EventMember
  deleteManyEventMembers(where: EventMemberWhereInput): BatchPayload!
  createEventMessage(data: EventMessageCreateInput!): EventMessage!
  updateEventMessage(data: EventMessageUpdateInput!, where: EventMessageWhereUniqueInput!): EventMessage
  updateManyEventMessages(data: EventMessageUpdateManyMutationInput!, where: EventMessageWhereInput): BatchPayload!
  upsertEventMessage(where: EventMessageWhereUniqueInput!, create: EventMessageCreateInput!, update: EventMessageUpdateInput!): EventMessage!
  deleteEventMessage(where: EventMessageWhereUniqueInput!): EventMessage
  deleteManyEventMessages(where: EventMessageWhereInput): BatchPayload!
  createEventTeam(data: EventTeamCreateInput!): EventTeam!
  updateEventTeam(data: EventTeamUpdateInput!, where: EventTeamWhereUniqueInput!): EventTeam
  updateManyEventTeams(data: EventTeamUpdateManyMutationInput!, where: EventTeamWhereInput): BatchPayload!
  upsertEventTeam(where: EventTeamWhereUniqueInput!, create: EventTeamCreateInput!, update: EventTeamUpdateInput!): EventTeam!
  deleteEventTeam(where: EventTeamWhereUniqueInput!): EventTeam
  deleteManyEventTeams(where: EventTeamWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createGroupMember(data: GroupMemberCreateInput!): GroupMember!
  updateGroupMember(data: GroupMemberUpdateInput!, where: GroupMemberWhereUniqueInput!): GroupMember
  updateManyGroupMembers(data: GroupMemberUpdateManyMutationInput!, where: GroupMemberWhereInput): BatchPayload!
  upsertGroupMember(where: GroupMemberWhereUniqueInput!, create: GroupMemberCreateInput!, update: GroupMemberUpdateInput!): GroupMember!
  deleteGroupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  deleteManyGroupMembers(where: GroupMemberWhereInput): BatchPayload!
  createGroupTeam(data: GroupTeamCreateInput!): GroupTeam!
  updateGroupTeam(data: GroupTeamUpdateInput!, where: GroupTeamWhereUniqueInput!): GroupTeam
  updateManyGroupTeams(data: GroupTeamUpdateManyMutationInput!, where: GroupTeamWhereInput): BatchPayload!
  upsertGroupTeam(where: GroupTeamWhereUniqueInput!, create: GroupTeamCreateInput!, update: GroupTeamUpdateInput!): GroupTeam!
  deleteGroupTeam(where: GroupTeamWhereUniqueInput!): GroupTeam
  deleteManyGroupTeams(where: GroupTeamWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createStaff(data: StaffCreateInput!): Staff!
  updateStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff
  updateManyStaffs(data: StaffUpdateManyMutationInput!, where: StaffWhereInput): BatchPayload!
  upsertStaff(where: StaffWhereUniqueInput!, create: StaffCreateInput!, update: StaffUpdateInput!): Staff!
  deleteStaff(where: StaffWhereUniqueInput!): Staff
  deleteManyStaffs(where: StaffWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createTesters(data: TestersCreateInput!): Testers!
  updateTesters(data: TestersUpdateInput!, where: TestersWhereUniqueInput!): Testers
  updateManyTesterses(data: TestersUpdateManyMutationInput!, where: TestersWhereInput): BatchPayload!
  upsertTesters(where: TestersWhereUniqueInput!, create: TestersCreateInput!, update: TestersUpdateInput!): Testers!
  deleteTesters(where: TestersWhereUniqueInput!): Testers
  deleteManyTesterses(where: TestersWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Organization {
  id: ID!
  createdAt: DateTime!
  name: String!
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
  staff(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff!]
  department(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department!]
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
  staff: StaffCreateManyWithoutOrganizationInput
  department: DepartmentCreateManyInput
}

input OrganizationCreateOneWithoutStaffInput {
  create: OrganizationCreateWithoutStaffInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutStaffInput {
  id: ID
  name: String!
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
  department: DepartmentCreateManyInput
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  website_ASC
  website_DESC
  Teams_ASC
  Teams_DESC
  leads_ASC
  leads_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  country_ASC
  country_DESC
  state_ASC
  state_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  staffs_ASC
  staffs_DESC
}

type OrganizationPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  name: String
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
  staff: StaffUpdateManyWithoutOrganizationInput
  department: DepartmentUpdateManyInput
}

input OrganizationUpdateManyMutationInput {
  name: String
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
}

input OrganizationUpdateOneWithoutStaffInput {
  create: OrganizationCreateWithoutStaffInput
  update: OrganizationUpdateWithoutStaffDataInput
  upsert: OrganizationUpsertWithoutStaffInput
  delete: Boolean
  disconnect: Boolean
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutStaffDataInput {
  name: String
  website: String
  Teams: Int
  leads: Int
  type: String
  description: String
  country: String
  state: String
  email: String
  password: String
  staffs: Int
  department: DepartmentUpdateManyInput
}

input OrganizationUpsertWithoutStaffInput {
  update: OrganizationUpdateWithoutStaffDataInput!
  create: OrganizationCreateWithoutStaffInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  Teams: Int
  Teams_not: Int
  Teams_in: [Int!]
  Teams_not_in: [Int!]
  Teams_lt: Int
  Teams_lte: Int
  Teams_gt: Int
  Teams_gte: Int
  leads: Int
  leads_not: Int
  leads_in: [Int!]
  leads_not_in: [Int!]
  leads_lt: Int
  leads_lte: Int
  leads_gt: Int
  leads_gte: Int
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  staffs: Int
  staffs_not: Int
  staffs_in: [Int!]
  staffs_not_in: [Int!]
  staffs_lt: Int
  staffs_lte: Int
  staffs_gt: Int
  staffs_gte: Int
  staff_every: StaffWhereInput
  staff_some: StaffWhereInput
  staff_none: StaffWhereInput
  department_every: DepartmentWhereInput
  department_some: DepartmentWhereInput
  department_none: DepartmentWhereInput
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
  name: String
  email: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  eventDiscusionChannel(where: EventDiscusionChannelWhereUniqueInput!): EventDiscusionChannel
  eventDiscusionChannels(where: EventDiscusionChannelWhereInput, orderBy: EventDiscusionChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventDiscusionChannel]!
  eventDiscusionChannelsConnection(where: EventDiscusionChannelWhereInput, orderBy: EventDiscusionChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventDiscusionChannelConnection!
  eventLead(where: EventLeadWhereUniqueInput!): EventLead
  eventLeads(where: EventLeadWhereInput, orderBy: EventLeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventLead]!
  eventLeadsConnection(where: EventLeadWhereInput, orderBy: EventLeadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventLeadConnection!
  eventMember(where: EventMemberWhereUniqueInput!): EventMember
  eventMembers(where: EventMemberWhereInput, orderBy: EventMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventMember]!
  eventMembersConnection(where: EventMemberWhereInput, orderBy: EventMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventMemberConnection!
  eventMessage(where: EventMessageWhereUniqueInput!): EventMessage
  eventMessages(where: EventMessageWhereInput, orderBy: EventMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventMessage]!
  eventMessagesConnection(where: EventMessageWhereInput, orderBy: EventMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventMessageConnection!
  eventTeam(where: EventTeamWhereUniqueInput!): EventTeam
  eventTeams(where: EventTeamWhereInput, orderBy: EventTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventTeam]!
  eventTeamsConnection(where: EventTeamWhereInput, orderBy: EventTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventTeamConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  groupMember(where: GroupMemberWhereUniqueInput!): GroupMember
  groupMembers(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupMember]!
  groupMembersConnection(where: GroupMemberWhereInput, orderBy: GroupMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupMemberConnection!
  groupTeam(where: GroupTeamWhereUniqueInput!): GroupTeam
  groupTeams(where: GroupTeamWhereInput, orderBy: GroupTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroupTeam]!
  groupTeamsConnection(where: GroupTeamWhereInput, orderBy: GroupTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupTeamConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  staff(where: StaffWhereUniqueInput!): Staff
  staffs(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff]!
  staffsConnection(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StaffConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  testers(where: TestersWhereUniqueInput!): Testers
  testerses(where: TestersWhereInput, orderBy: TestersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Testers]!
  testersesConnection(where: TestersWhereInput, orderBy: TestersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestersConnection!
  node(id: ID!): Node
}

type Staff {
  id: ID!
  firstname: String!
  lastname: String!
  organization: Organization
  team: String
  isLead: Boolean
  lead: Team
  role: String
  country: String
  state: String
  email: String
  password: String
  joinedAt: DateTime!
}

type StaffConnection {
  pageInfo: PageInfo!
  edges: [StaffEdge]!
  aggregate: AggregateStaff!
}

input StaffCreateInput {
  id: ID
  firstname: String!
  lastname: String!
  organization: OrganizationCreateOneWithoutStaffInput
  team: String
  isLead: Boolean
  lead: TeamCreateOneWithoutLeadInput
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffCreateManyWithoutLeadInput {
  create: [StaffCreateWithoutLeadInput!]
  connect: [StaffWhereUniqueInput!]
}

input StaffCreateManyWithoutOrganizationInput {
  create: [StaffCreateWithoutOrganizationInput!]
  connect: [StaffWhereUniqueInput!]
}

input StaffCreateWithoutLeadInput {
  id: ID
  firstname: String!
  lastname: String!
  organization: OrganizationCreateOneWithoutStaffInput
  team: String
  isLead: Boolean
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffCreateWithoutOrganizationInput {
  id: ID
  firstname: String!
  lastname: String!
  team: String
  isLead: Boolean
  lead: TeamCreateOneWithoutLeadInput
  role: String
  country: String
  state: String
  email: String
  password: String
}

type StaffEdge {
  node: Staff!
  cursor: String!
}

enum StaffOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  team_ASC
  team_DESC
  isLead_ASC
  isLead_DESC
  role_ASC
  role_DESC
  country_ASC
  country_DESC
  state_ASC
  state_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  joinedAt_ASC
  joinedAt_DESC
}

type StaffPreviousValues {
  id: ID!
  firstname: String!
  lastname: String!
  team: String
  isLead: Boolean
  role: String
  country: String
  state: String
  email: String
  password: String
  joinedAt: DateTime!
}

input StaffScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  team: String
  team_not: String
  team_in: [String!]
  team_not_in: [String!]
  team_lt: String
  team_lte: String
  team_gt: String
  team_gte: String
  team_contains: String
  team_not_contains: String
  team_starts_with: String
  team_not_starts_with: String
  team_ends_with: String
  team_not_ends_with: String
  isLead: Boolean
  isLead_not: Boolean
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  joinedAt: DateTime
  joinedAt_not: DateTime
  joinedAt_in: [DateTime!]
  joinedAt_not_in: [DateTime!]
  joinedAt_lt: DateTime
  joinedAt_lte: DateTime
  joinedAt_gt: DateTime
  joinedAt_gte: DateTime
  AND: [StaffScalarWhereInput!]
  OR: [StaffScalarWhereInput!]
  NOT: [StaffScalarWhereInput!]
}

type StaffSubscriptionPayload {
  mutation: MutationType!
  node: Staff
  updatedFields: [String!]
  previousValues: StaffPreviousValues
}

input StaffSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StaffWhereInput
  AND: [StaffSubscriptionWhereInput!]
  OR: [StaffSubscriptionWhereInput!]
  NOT: [StaffSubscriptionWhereInput!]
}

input StaffUpdateInput {
  firstname: String
  lastname: String
  organization: OrganizationUpdateOneWithoutStaffInput
  team: String
  isLead: Boolean
  lead: TeamUpdateOneWithoutLeadInput
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffUpdateManyDataInput {
  firstname: String
  lastname: String
  team: String
  isLead: Boolean
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffUpdateManyMutationInput {
  firstname: String
  lastname: String
  team: String
  isLead: Boolean
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffUpdateManyWithoutLeadInput {
  create: [StaffCreateWithoutLeadInput!]
  delete: [StaffWhereUniqueInput!]
  connect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  disconnect: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutLeadInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutLeadInput!]
  deleteMany: [StaffScalarWhereInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
}

input StaffUpdateManyWithoutOrganizationInput {
  create: [StaffCreateWithoutOrganizationInput!]
  delete: [StaffWhereUniqueInput!]
  connect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  disconnect: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutOrganizationInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutOrganizationInput!]
  deleteMany: [StaffScalarWhereInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
}

input StaffUpdateManyWithWhereNestedInput {
  where: StaffScalarWhereInput!
  data: StaffUpdateManyDataInput!
}

input StaffUpdateWithoutLeadDataInput {
  firstname: String
  lastname: String
  organization: OrganizationUpdateOneWithoutStaffInput
  team: String
  isLead: Boolean
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffUpdateWithoutOrganizationDataInput {
  firstname: String
  lastname: String
  team: String
  isLead: Boolean
  lead: TeamUpdateOneWithoutLeadInput
  role: String
  country: String
  state: String
  email: String
  password: String
}

input StaffUpdateWithWhereUniqueWithoutLeadInput {
  where: StaffWhereUniqueInput!
  data: StaffUpdateWithoutLeadDataInput!
}

input StaffUpdateWithWhereUniqueWithoutOrganizationInput {
  where: StaffWhereUniqueInput!
  data: StaffUpdateWithoutOrganizationDataInput!
}

input StaffUpsertWithWhereUniqueWithoutLeadInput {
  where: StaffWhereUniqueInput!
  update: StaffUpdateWithoutLeadDataInput!
  create: StaffCreateWithoutLeadInput!
}

input StaffUpsertWithWhereUniqueWithoutOrganizationInput {
  where: StaffWhereUniqueInput!
  update: StaffUpdateWithoutOrganizationDataInput!
  create: StaffCreateWithoutOrganizationInput!
}

input StaffWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  organization: OrganizationWhereInput
  team: String
  team_not: String
  team_in: [String!]
  team_not_in: [String!]
  team_lt: String
  team_lte: String
  team_gt: String
  team_gte: String
  team_contains: String
  team_not_contains: String
  team_starts_with: String
  team_not_starts_with: String
  team_ends_with: String
  team_not_ends_with: String
  isLead: Boolean
  isLead_not: Boolean
  lead: TeamWhereInput
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  joinedAt: DateTime
  joinedAt_not: DateTime
  joinedAt_in: [DateTime!]
  joinedAt_not_in: [DateTime!]
  joinedAt_lt: DateTime
  joinedAt_lte: DateTime
  joinedAt_gt: DateTime
  joinedAt_gte: DateTime
  AND: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  NOT: [StaffWhereInput!]
}

input StaffWhereUniqueInput {
  id: ID
  lastname: String
  email: String
}

type Subscription {
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  eventDiscusionChannel(where: EventDiscusionChannelSubscriptionWhereInput): EventDiscusionChannelSubscriptionPayload
  eventLead(where: EventLeadSubscriptionWhereInput): EventLeadSubscriptionPayload
  eventMember(where: EventMemberSubscriptionWhereInput): EventMemberSubscriptionPayload
  eventMessage(where: EventMessageSubscriptionWhereInput): EventMessageSubscriptionPayload
  eventTeam(where: EventTeamSubscriptionWhereInput): EventTeamSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  groupMember(where: GroupMemberSubscriptionWhereInput): GroupMemberSubscriptionPayload
  groupTeam(where: GroupTeamSubscriptionWhereInput): GroupTeamSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  staff(where: StaffSubscriptionWhereInput): StaffSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  testers(where: TestersSubscriptionWhereInput): TestersSubscriptionPayload
}

type Team {
  id: ID!
  name: String!
  members: Int
  description: String
  department: Department
  active: Boolean
  lead(where: StaffWhereInput, orderBy: StaffOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Staff!]
  createdAt: DateTime!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  name: String!
  members: Int
  description: String
  department: DepartmentCreateOneWithoutTeamsInput
  active: Boolean
  lead: StaffCreateManyWithoutLeadInput
}

input TeamCreateManyWithoutDepartmentInput {
  create: [TeamCreateWithoutDepartmentInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutLeadInput {
  create: TeamCreateWithoutLeadInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutDepartmentInput {
  id: ID
  name: String!
  members: Int
  description: String
  active: Boolean
  lead: StaffCreateManyWithoutLeadInput
}

input TeamCreateWithoutLeadInput {
  id: ID
  name: String!
  members: Int
  description: String
  department: DepartmentCreateOneWithoutTeamsInput
  active: Boolean
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  members_ASC
  members_DESC
  description_ASC
  description_DESC
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  members: Int
  description: String
  active: Boolean
  createdAt: DateTime!
}

input TeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members: Int
  members_not: Int
  members_in: [Int!]
  members_not_in: [Int!]
  members_lt: Int
  members_lte: Int
  members_gt: Int
  members_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  active: Boolean
  active_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  NOT: [TeamScalarWhereInput!]
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  name: String
  members: Int
  description: String
  department: DepartmentUpdateOneWithoutTeamsInput
  active: Boolean
  lead: StaffUpdateManyWithoutLeadInput
}

input TeamUpdateManyDataInput {
  name: String
  members: Int
  description: String
  active: Boolean
}

input TeamUpdateManyMutationInput {
  name: String
  members: Int
  description: String
  active: Boolean
}

input TeamUpdateManyWithoutDepartmentInput {
  create: [TeamCreateWithoutDepartmentInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput!
  data: TeamUpdateManyDataInput!
}

input TeamUpdateOneWithoutLeadInput {
  create: TeamCreateWithoutLeadInput
  update: TeamUpdateWithoutLeadDataInput
  upsert: TeamUpsertWithoutLeadInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutDepartmentDataInput {
  name: String
  members: Int
  description: String
  active: Boolean
  lead: StaffUpdateManyWithoutLeadInput
}

input TeamUpdateWithoutLeadDataInput {
  name: String
  members: Int
  description: String
  department: DepartmentUpdateOneWithoutTeamsInput
  active: Boolean
}

input TeamUpdateWithWhereUniqueWithoutDepartmentInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutDepartmentDataInput!
}

input TeamUpsertWithoutLeadInput {
  update: TeamUpdateWithoutLeadDataInput!
  create: TeamCreateWithoutLeadInput!
}

input TeamUpsertWithWhereUniqueWithoutDepartmentInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutDepartmentDataInput!
  create: TeamCreateWithoutDepartmentInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members: Int
  members_not: Int
  members_in: [Int!]
  members_not_in: [Int!]
  members_lt: Int
  members_lte: Int
  members_gt: Int
  members_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  department: DepartmentWhereInput
  active: Boolean
  active_not: Boolean
  lead_every: StaffWhereInput
  lead_some: StaffWhereInput
  lead_none: StaffWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
}

type Testers {
  id: ID!
  firstname: String
  lastname: String
  email: String
  department: String
}

type TestersConnection {
  pageInfo: PageInfo!
  edges: [TestersEdge]!
  aggregate: AggregateTesters!
}

input TestersCreateInput {
  id: ID
  firstname: String
  lastname: String
  email: String
  department: String
}

type TestersEdge {
  node: Testers!
  cursor: String!
}

enum TestersOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  email_ASC
  email_DESC
  department_ASC
  department_DESC
}

type TestersPreviousValues {
  id: ID!
  firstname: String
  lastname: String
  email: String
  department: String
}

type TestersSubscriptionPayload {
  mutation: MutationType!
  node: Testers
  updatedFields: [String!]
  previousValues: TestersPreviousValues
}

input TestersSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestersWhereInput
  AND: [TestersSubscriptionWhereInput!]
  OR: [TestersSubscriptionWhereInput!]
  NOT: [TestersSubscriptionWhereInput!]
}

input TestersUpdateInput {
  firstname: String
  lastname: String
  email: String
  department: String
}

input TestersUpdateManyMutationInput {
  firstname: String
  lastname: String
  email: String
  department: String
}

input TestersWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  AND: [TestersWhereInput!]
  OR: [TestersWhereInput!]
  NOT: [TestersWhereInput!]
}

input TestersWhereUniqueInput {
  id: ID
  lastname: String
  email: String
}
`
      }
    