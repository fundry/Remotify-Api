type Testers {
  id: ID! @id
  firstname: String  
  lastname: String @unique
  email: String @unique
  department: String
}

type Group {
  id: ID! @id
  name: String! @unique
  description: String
  members: Int 
  member: [GroupMember] @relation( name : "GroupMember"   , onDelete: CASCADE  )
  email: String! @unique
  password : String!    
  team : Team @relation( name : "GroupTeam"   , onDelete: CASCADE  ) 
  createdAt: DateTime! @createdAt
}

type GroupMember {
  id : ID! @id
  firstname : ID!
  lastname : ID! @unique
  password : String!
  team : String
  group : Group @relation( name : "GroupMember"  )  
}


type Organization { 
   id: ID! @id
  createdAt: DateTime! @createdAt
  name : String! @unique
  Teams  : Int
  leads : Int  
  type: String
  description: String
  country : String
  state: String   
  email : String @unique
  password: String
  staffs :  Int 
  staff :  [Staff!]! @relation( name : "OrganizationStaff"   , onDelete: CASCADE  )  
 department: [Department!]!
}
 
type Department {
  id: ID!  @id
  leads:  Int
  name: String! @unique
  teams: [Team!]!  @relation( name : "DepartmentTeam"   , onDelete: CASCADE  )  
  createdAt: DateTime! @createdAt
}

type Team { 
  id: ID! @id
  name : String! @unique
  members : Int  
  description: String  
  department :  Department @relation( name : "DepartmentTeam"  )  
  active : Boolean 
  lead : [Staff!]! @relation( name : "TeamLead"   , onDelete: CASCADE  ) 
  createdAt: DateTime! @createdAt
} 
  
type Staff  {
  id: ID! @id
  firstname: String!
  lastname: String! @unique
  organization :  Organization @relation( name : "OrganizationStaff"  )  
  team :  String
  isLead: Boolean
  lead:  Team @relation( name : "TeamLead"   ) 
  role : String
  country: String
  state: String
  email: String  @unique
  password: String   
  joinedAt : DateTime! @createdAt
}


