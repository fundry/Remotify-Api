# import Team from "../prisma/prisma.graphql"
# import Staff from "../prisma/prisma.graphql"
# import Organization from "../prisma/prisma.graphql"
# import Group from "../prisma/prisma.graphql"
# import Event from "../prisma/prisma.graphql"


type Query {
    info: String 

    # single queries
    staff(where: StaffWhereUniqueInput): Staff 
    team(where: TeamWhereUniqueInput): Team 
    organization(where: OrganizationWhereUniqueInput): Organization
    group(where: GroupWhereUniqueInput): Group
    event(where: EventWhereUniqueInput): Event
 
  # multiple mutations
    allOrganizations: [Organization!]
    allStaff: [Staff!]
    allTeam: [Team!]
    allGroup: [Group!]
    allEvent: [Event!]
    node(id: ID!): Node
}

type Mutation {


 # Event Mutations ===========>
    createEvent( where: UniqueInput
      name: String!
      description: String 
      email: String 
      createdAt: Int
      members: Int
      website: String  
      password: String!  
      leads: Int  
      teams: Int  
      members: Int  
    ): Event


    # Group Mutations ===========>
    createGroup( where: UniqueInput
      name: String!
      description: String 
      email: String 
      password: String!  
      website: String  
      createdAt: Int
      members: Int  
      leads: Int  
      teams: Int  
    ): Group


  # organization Mutations
    createOrganization(  where: UniqueInput 
        name: String!
        description: String
        createdAt: Int
        staffs: Int
        type: String
         email: String
      website: String  
         country: String
         state: String
         password: String
      ): Organization

    createDepartment(
        name: String!  
        createdAt: Int
    ): Organization    

    createStaff(    
      firstname: String!
      lastname: String
      role: String
      email: String
      country: String
      state: String
      joinedAt: Int
      isLead: Boolean 
      ): Staff

    createTeam(   
      name: String!
      members: Int
      active: Boolean
      createdAt: Int
      description: String 
    ): Team

# authentication ================>
  loginOrganization(
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload

  loginGroup(
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload

   loginStaff(
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload

   loginGroupMember(
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload

   loginEvent (
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload 

   loginEventMember(
    where: UniqueInput!
    name: String!
    password: String!
  ) :  AuthPayload

# cloud functions resolvers here 
    sendEmail(
      email: String
    ) : Organization
}

type AuthPayload {
    token: String
    organization: Organization
}

input UniqueInput{
  id : ID
  email: String
}
